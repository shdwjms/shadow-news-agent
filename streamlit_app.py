# Shadow Intel Agent - NewsAPI Version
import streamlit as st
import requests
import json
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
st.set_page_config(
    page_title="Shadow Intel Agent",
    page_icon="üïµÔ∏è",
    layout="wide"
)

# –ó–∞–≥–ª–∞–≤–∏—è
st.title("üïµÔ∏è Shadow Intel Agent")
st.subheader("üì∞ AI & Tech Intelligence Gathering")

# Session state
if 'search_count' not in st.session_state:
    st.session_state.search_count = 0

# NewsAPI –∫–ª—é—á (–≤–º—ä–∫–Ω–∞—Ç –¥–∏—Ä–µ–∫—Ç–Ω–æ)
NEWSAPI_KEY = "cdd83a93db6344bc95c7d5eedd117c02"
    
    st.warning("‚ö†Ô∏è –ë–µ–∑ API –∫–ª—é—á —â–µ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω –º–µ—Ç–æ–¥ (–ø–æ-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω)")

# –ò–∑–±–æ—Ä –Ω–∞ —Ç–µ–º–∞
query_options = {
    "AI investing": "artificial intelligence investing OR AI stocks",
    "AI market": "artificial intelligence market trends", 
    "AI stocks": "AI stocks OR artificial intelligence companies",
    "Nvidia": "Nvidia OR NVDA stock",
    "OpenAI": "OpenAI OR ChatGPT",
    "ChatGPT": "ChatGPT OR OpenAI",
    "Tesla AI": "Tesla artificial intelligence OR Tesla FSD"
}

selected_topic = st.selectbox(
    "üì∞ –ò–∑–±–µ—Ä–∏ —Ç–µ–º–∞:",
    list(query_options.keys())
)

query = query_options[selected_topic]

# –§–∏–ª—Ç—Ä–∏
col1, col2 = st.columns(2)
with col1:
    days_back = st.slider("üìÖ –ù–æ–≤–∏–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ –¥–Ω–∏:", 1, 30, 7)
with col2:
    language = st.selectbox("üåç –ï–∑–∏–∫:", ["en", "bg"], index=0)

# –û—Å–Ω–æ–≤–µ–Ω API –º–µ—Ç–æ–¥
def search_with_newsapi(api_key, query, days_back, language):
    from_date = (datetime.now() - timedelta(days=days_back)).strftime('%Y-%m-%d')
    
    url = "https://newsapi.org/v2/everything"
    params = {
        'q': query,
        'from': from_date,
        'language': language,
        'sortBy': 'relevancy',
        'pageSize': 20,
        'apiKey': api_key
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"API –≥—Ä–µ—à–∫–∞: {str(e)}")
        return None

# –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω –º–µ—Ç–æ–¥ –±–µ–∑ API
def search_alternative():
    """–ò–∑–ø–æ–ª–∑–≤–∞ –ø—É–±–ª–∏—á–Ω–∏ RSS feeds"""
    try:
        # TechCrunch RSS –∑–∞ AI –Ω–æ–≤–∏–Ω–∏
        rss_urls = {
            "TechCrunch": "https://techcrunch.com/category/artificial-intelligence/feed/",
            "VentureBeat": "https://feeds.feedburner.com/venturebeat/SZYF",
            "AI News": "https://www.artificialintelligence-news.com/feed/"
        }
        
        st.info("üîÑ –ò–∑–ø–æ–ª–∑–≤–∞–º –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏ (RSS feeds)...")
        
        results = []
        for source, url in rss_urls.items():
            try:
                import feedparser
                feed = feedparser.parse(url)
                
                for entry in feed.entries[:5]:  # –ü—ä—Ä–≤–∏—Ç–µ 5 –æ—Ç –≤—Å–µ–∫–∏ feed
                    results.append({
                        'title': entry.title,
                        'description': entry.get('summary', '–ù—è–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ'),
                        'url': entry.link,
                        'source': source,
                        'publishedAt': entry.get('published', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –¥–∞—Ç–∞')
                    })
            except:
                continue
                
        return {'articles': results, 'totalResults': len(results)}
        
    except ImportError:
        st.error("‚ùå –ó–∞ –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—è –º–µ—Ç–æ–¥ –µ –Ω—É–∂–µ–Ω feedparser: pip install feedparser")
        return None

# –ë—É—Ç–æ–Ω –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ
if st.button("üîç –ó–∞–ø–æ—á–Ω–∏ —Ç—ä—Ä—Å–µ–Ω–µ—Ç–æ"):
    st.session_state.search_count += 1
    
    with st.spinner("–¢—ä—Ä—Å—è –∞–∫—Ç—É–∞–ª–Ω–∏ –Ω–æ–≤–∏–Ω–∏... üì∞"):
        
        if NEWSAPI_KEY:
            # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ NewsAPI
            data = search_with_newsapi(NEWSAPI_KEY, query, days_back, language)
        else:
            # –ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω –º–µ—Ç–æ–¥
            data = search_alternative()
        
        if data and data.get('articles'):
            articles = data['articles']
            total = data.get('totalResults', len(articles))
            
            st.success(f"‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∏ —Å–∞ {len(articles)} –Ω–æ–≤–∏–Ω–∏ –æ—Ç –æ–±—â–æ {total}")
            
            # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
            for i, article in enumerate(articles):
                with st.expander(f"üì∞ {article['title'][:80]}..."):
                    
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"### {article['title']}")
                        st.write(article.get('description', '–ù—è–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ'))
                        
                        if article.get('publishedAt'):
                            try:
                                pub_date = datetime.fromisoformat(article['publishedAt'].replace('Z', '+00:00'))
                                st.caption(f"üìÖ {pub_date.strftime('%d.%m.%Y %H:%M')}")
                            except:
                                st.caption(f"üìÖ {article['publishedAt']}")
                    
                    with col2:
                        if article.get('urlToImage'):
                            try:
                                st.image(article['urlToImage'], width=150)
                            except:
                                st.write("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—ä–ø–Ω–æ")
                        
                        st.markdown(f"**–ò–∑—Ç–æ—á–Ω–∏–∫:** {article.get('source', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                    
                    st.markdown(f"üîó [–ü—Ä–æ—á–µ—Ç–∏ –ø—ä–ª–Ω–∞—Ç–∞ —Å—Ç–∞—Ç–∏—è]({article['url']})")
                    st.divider()
        else:
            st.warning("‚ö†Ô∏è –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏")
            if not NEWSAPI_KEY:
                st.info("üí° –î–æ–±–∞–≤–∏ API –∫–ª—é—á –∑–∞ –ø–æ-–¥–æ–±—Ä–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏!")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
if st.session_state.search_count > 0:
    st.info(f"üìä –ù–∞–ø—Ä–∞–≤–µ–Ω–∏ –∑–∞—è–≤–∫–∏ —Ç–∞–∑–∏ —Å–µ—Å–∏—è: {st.session_state.search_count}")
    
    if NEWSAPI_KEY and st.session_state.search_count > 80:
        st.warning("‚ö†Ô∏è –ë–ª–∏–∑–æ –¥–æ –ª–∏–º–∏—Ç–∞ –æ—Ç 100 –∑–∞—è–≤–∫–∏/–¥–µ–Ω!")

# –î–∏—Ä–µ–∫—Ç–Ω–∏ –ª–∏–Ω–∫–æ–≤–µ (–∫–∞—Ç–æ backup)
st.divider()
st.subheader("üîó –î–∏—Ä–µ–∫—Ç–Ω–∏ –∏–∑—Ç–æ—á–Ω–∏—Ü–∏ (–≤–∏–Ω–∞–≥–∏ —Ä–∞–±–æ—Ç—è—Ç)")

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("### üìä –§–∏–Ω–∞–Ω—Å–∏")
    st.markdown("- [Yahoo Finance](https://finance.yahoo.com)")
    st.markdown("- [MarketWatch](https://www.marketwatch.com)")
    st.markdown("- [Reuters](https://www.reuters.com)")

with col2:
    st.markdown("### ü§ñ AI –ù–æ–≤–∏–Ω–∏")
    st.markdown("- [VentureBeat AI](https://venturebeat.com/ai/)")
    st.markdown("- [The Verge AI](https://www.theverge.com/ai-artificial-intelligence)")
    st.markdown("- [TechCrunch AI](https://techcrunch.com/category/artificial-intelligence/)")

with col3:
    st.markdown("### üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
    st.markdown("- [Seeking Alpha](https://seekingalpha.com)")
    st.markdown("- [Benzinga](https://www.benzinga.com)")
    st.markdown("- [Bloomberg Tech](https://www.bloomberg.com/technology)")

# Footer
st.divider()
st.caption("Made with ‚òï and sarcasm by Shadow & James | üöÄ Powered by NewsAPI + Streamlit")

# Sidebar —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
with st.sidebar:
    st.header("üÜï –ù–æ–≤–∞ –≤–µ—Ä—Å–∏—è —Å NewsAPI!")
    st.success("‚úÖ –ù—è–º–∞ –±–ª–æ–∫–∏—Ä–∞–Ω–∏—è!")
    st.success("‚úÖ 100 –±–µ–∑–ø–ª–∞—Ç–Ω–∏ –∑–∞—è–≤–∫–∏/–¥–µ–Ω")
    st.success("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–∞–Ω–∏ –¥–∞–Ω–Ω–∏")
    st.success("‚úÖ –§–∏–ª—Ç—Ä–∏ –ø–æ –¥–∞—Ç–∞ –∏ –µ–∑–∏–∫")
    
    st.header("‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∏:")
    st.write("""
    1. üîë –í—ä–≤–µ–¥–∏ API –∫–ª—é—á (–µ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)
    2. üéØ –ò–∑–±–µ—Ä–∏ —Ç–µ–º–∞
    3. üìÖ –ù–∞—Å—Ç—Ä–æ–π —Ñ–∏–ª—Ç—Ä–∏—Ç–µ
    4. üîç –ù–∞—Ç–∏—Å–Ω–∏ —Ç—ä—Ä—Å–µ–Ω–µ
    5. üì∞ –†–∞–∑–≥–ª–µ–¥–∞–π –Ω–æ–≤–∏–Ω–∏—Ç–µ!
    """)
    
    st.header("üí° –ë–µ–∑ API –∫–ª—é—á?")
    st.write("–©–µ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ RSS feeds, –Ω–æ —Å –ø–æ-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏.")
    
    if st.button("üîÑ –ù—É–ª–∏—Ä–∞–π –±—Ä–æ—è—á–∞"):
        st.session_state.search_count = 0
        st.rerun()
